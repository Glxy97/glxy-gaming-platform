"""Database models for PDF documents and fields - Prisma compatible."""

from __future__ import annotations

import enum
from datetime import datetime
from typing import Optional, List

from sqlmodel import Field, Relationship, SQLModel, Column, Enum as SQLEnum


class PdfDocumentStatus(str, enum.Enum):
    """Status enum matching Prisma schema."""
    DRAFT = "DRAFT"
    ANALYZING = "ANALYZING"
    REVIEW = "REVIEW"
    SYNCED = "SYNCED"
    ERROR = "ERROR"


class PdfFieldStatus(str, enum.Enum):
    """Field status enum matching Prisma schema."""
    DRAFT = "DRAFT"
    PENDING_REVIEW = "PENDING_REVIEW"
    APPROVED = "APPROVED"
    SYNCED = "SYNCED"


class PdfDocument(SQLModel, table=True):
    """
    PDF Document model - matches Prisma PdfDocument.
    Table name: pdf_documents
    """
    __tablename__ = "pdf_documents"

    id: Optional[str] = Field(default=None, primary_key=True, description="CUID generated by database")
    user_id: str = Field(foreign_key="users.id", index=True)
    title: str
    filename: str
    storage_path: str
    status: PdfDocumentStatus = Field(
        default=PdfDocumentStatus.DRAFT,
        sa_column=Column(SQLEnum(PdfDocumentStatus), nullable=False, server_default="DRAFT")
    )
    checksum: Optional[str] = None

    # Metadata
    page_count: Optional[int] = None
    file_size: Optional[int] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow, nullable=False)
    updated_at: datetime = Field(default_factory=datetime.utcnow, nullable=False)

    # Relationships
    fields: List["PdfField"] = Relationship(back_populates="document")

    class Config:
        arbitrary_types_allowed = True


class PdfField(SQLModel, table=True):
    """
    PDF Field model - matches Prisma PdfField.
    Table name: pdf_fields
    """
    __tablename__ = "pdf_fields"

    id: Optional[str] = Field(default=None, primary_key=True, description="CUID generated by database")
    document_id: str = Field(foreign_key="pdf_documents.id", index=True)

    # PDF Field identification
    pdf_name: str
    display_label: Optional[str] = None
    group_name: Optional[str] = None
    field_type: str = Field(default="text")

    # Validation
    required: bool = Field(default=False)
    validation_pattern: Optional[str] = None

    # DataPad Integration
    datapad_field_id: Optional[str] = Field(default=None, index=True)
    suggestions: Optional[str] = None  # JSON string

    # Position in PDF (normalized 0-1)
    x: float = Field(default=0.0)
    y: float = Field(default=0.0)
    width: float = Field(default=0.0)
    height: float = Field(default=0.0)
    page_number: int = Field(default=1)

    status: PdfFieldStatus = Field(
        default=PdfFieldStatus.DRAFT,
        sa_column=Column(SQLEnum(PdfFieldStatus), nullable=False, server_default="DRAFT")
    )
    updated_at: datetime = Field(default_factory=datetime.utcnow, nullable=False)

    # Relationships
    document: Optional[PdfDocument] = Relationship(back_populates="fields")

    # Backward compatibility property
    @property
    def form_id(self) -> str:
        """Alias for document_id for backward compatibility."""
        return self.document_id

    class Config:
        arbitrary_types_allowed = True
