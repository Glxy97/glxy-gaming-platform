name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===================================================
  # === Job 1: Code Quality & Security Checks ===
  # ===================================================
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --no-optional

      - name: Run TypeScript check
        run: npm run typecheck
        continue-on-error: true

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ===================================================
  # === Job 2: Unit Tests ===
  # ===================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --no-optional

      - name: Run unit tests
        run: npm run test -- --coverage
        continue-on-error: true
        timeout-minutes: 3

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # ===================================================
  # === Job 3: E2E Tests ===
  # ===================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --no-optional

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run E2E tests
        run: npm run e2e
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-screenshots
          path: test-results/
          retention-days: 7

  # ===================================================
  # === Job 4: Build & Push Docker Images ===
  # ===================================================
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        continue-on-error: true
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  # ===================================================
  # === Job 5: Security Scan ===
  # ===================================================
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  # ===================================================
  # === Job 6: Deploy to Production ===
  # ===================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    environment:
      name: production
      url: https://glxy.at
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            docker-compose.prod.yml \
            nginx/ \
            scripts/deploy.sh \
            .env.production.template

      - name: Setup deployment directory
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          ssh "$SERVER_USER@$SERVER_HOST" "mkdir -p /opt/glxy-gaming"

      - name: Copy deployment package to server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          scp -o StrictHostKeyChecking=no deploy.tar.gz "$SERVER_USER@$SERVER_HOST:/tmp/"

      - name: Deploy application
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            set -e

            # Setup directories
            cd /opt/glxy-gaming

            # Extract deployment package
            tar -xzf /tmp/deploy.tar.gz

            # Pull latest images
            docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Run deployment script
            sudo bash scripts/deploy.sh deploy

            # Cleanup
            rm /tmp/deploy.tar.gz
            docker logout ${{ env.DOCKER_REGISTRY }}
          ENDSSH

      - name: Health check
        run: |
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts..."

            if curl -f https://glxy.at/api/health; then
              echo "Health check passed!"
              exit 0
            fi

            echo "Health check failed, retrying in 10s..."
            sleep 10
            ((attempt++))
          done

          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            cd /opt/glxy-gaming
            echo "Deployment failed, rolling back..."
            docker-compose -f docker-compose.prod.yml down
            # Restore previous version logic here
          ENDSSH

      - name: Notify deployment success
        if: success()
        run: |
          echo "Deployment to production successful!"
          # Add Slack/Discord notification here if needed

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Deployment to production failed!"
          # Add Slack/Discord notification here if needed

  # ===================================================
  # === Job 7: Post-Deployment Smoke Tests ===
  # ===================================================
  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test homepage
        run: curl -f https://glxy.at

      - name: Test health endpoint
        run: |
          response=$(curl -s https://glxy.at/api/health)
          echo $response | jq -e '.status == "healthy"'

      - name: Test API endpoints
        run: |
          # Test public API endpoints
          curl -f https://glxy.at/api/auth/providers

      - name: Test WebSocket connection
        run: |
          # Basic WebSocket connectivity test
          npm install -g wscat
          timeout 10 wscat -c wss://glxy.at/socket.io/?EIO=4&transport=websocket || true

      - name: Performance check
        run: |
          # Check response time
          response_time=$(curl -o /dev/null -s -w '%{time_total}' https://glxy.at)
          echo "Response time: ${response_time}s"

          # Fail if response time > 3 seconds
          if (( $(echo "$response_time > 3" | bc -l) )); then
            echo "Performance check failed: response time too high"
            exit 1
          fi
