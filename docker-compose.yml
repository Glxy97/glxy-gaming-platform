version: '3.9'

# ============================================
# = GLXY Gaming Platform - Docker Compose Production
# ============================================

services:
  # === Next.js Application ===
  app:
    build:
      context: .
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
      args:
        NODE_ENV: production
    image: glxy-gaming:latest
    container_name: glxy-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - glxy-network
    volumes:
      - uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # === Web-Adobe FastAPI API Service ===
  web-adobe-api:
    build:
      context: ./services/web-adobe-api
      dockerfile: Dockerfile
    image: web-adobe-api:latest
    container_name: glxy-web-adobe-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      APP_NAME: "Web Adobe Backend"
      ENVIRONMENT: production
      DEBUG: "false"
      API_PREFIX: /api
      ALLOWED_ORIGINS: '["https://glxy.at","https://www.glxy.at"]'
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      STORAGE_DIR: /app/var/storage
      UPLOAD_DIR: /app/var/uploads
      AI_PROVIDER: ${AI_PROVIDER:-}
      AI_API_KEY: ${AI_API_KEY:-}
      AI_MODEL: ${AI_MODEL:-gpt-4}
      DATAPAD_BASE_URL: ${DATAPAD_BASE_URL:-}
      DATAPAD_API_KEY: ${DATAPAD_API_KEY:-}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - glxy-network
    volumes:
      - pdf_storage:/app/var/storage
      - pdf_uploads:/app/var/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # === Web-Adobe Celery Worker ===
  web-adobe-worker:
    build:
      context: ./services/web-adobe-api
      dockerfile: Dockerfile
    image: web-adobe-api:latest
    container_name: glxy-web-adobe-worker
    restart: unless-stopped
    command: ["celery", "-A", "app.services.task_queue.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
    environment:
      APP_NAME: "Web Adobe Worker"
      ENVIRONMENT: production
      DEBUG: "false"
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      STORAGE_DIR: /app/var/storage
      UPLOAD_DIR: /app/var/uploads
      AI_PROVIDER: ${AI_PROVIDER:-}
      AI_API_KEY: ${AI_API_KEY:-}
      AI_MODEL: ${AI_MODEL:-gpt-4}
      DATAPAD_BASE_URL: ${DATAPAD_BASE_URL:-}
      DATAPAD_API_KEY: ${DATAPAD_API_KEY:-}
    depends_on:
      web-adobe-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - glxy-network
    volumes:
      - pdf_storage:/app/var/storage
      - pdf_uploads:/app/var/uploads
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.services.task_queue.celery_app inspect ping -d celery@$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # === PostgreSQL Database ===
  db:
    image: postgres:16-alpine
    container_name: glxy-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-glxy_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-glxy_gaming}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/optimize-database.sql:/docker-entrypoint-initdb.d/02-optimize.sql:ro
    networks:
      - glxy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-glxy_admin} -d ${POSTGRES_DB:-glxy_gaming}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c max_connections=200

  # === Redis Cache ===
  redis:
    image: redis:7-alpine
    container_name: glxy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --tcp-backlog 511
      --tcp-keepalive 300
      --timeout 0
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - glxy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # === Nginx Reverse Proxy ===
  nginx:
    image: nginx:alpine
    container_name: glxy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/glxy.conf:/etc/nginx/glxy.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
      - web-adobe-api
    networks:
      - glxy-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Backup Service (Optional) ===
  backup:
    image: postgres:16-alpine
    container_name: glxy-backup
    profiles: ["backup"]
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
    networks:
      - glxy-network
    command: >
      sh -c 'while true; do
        pg_dump -h db -U ${POSTGRES_USER:-glxy_admin} -d ${POSTGRES_DB:-glxy_gaming} > /backups/backup-$$(date +%Y%m%d-%H%M%S).sql;
        find /backups -name "backup-*.sql" -mtime +7 -delete;
        sleep 86400;
      done'

networks:
  glxy-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  nginx_cache:
    driver: local
  pdf_storage:
    driver: local
  pdf_uploads:
    driver: local
